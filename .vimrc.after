" settings for ruby textobjects (vim-textobj-rubyblock)
set mouse=a
set nocompatible " must be set before iskeyword since it resets iskeyword
runtime macros/matchit.vim
if has("autocmd")
  filetype indent plugin on
endif
filetype plugin indent on

" color options
if $VIM_DARK == '1'
  set background=dark
  color solarized
else
  set background=light
  color github
endif

hi Normal ctermbg=NONE

let g:solarized_visibility='high'
let g:solarized_contrast='high'

set relativenumber
" paste from clipboard
set clipboard=unnamed

" Reloads the file when it's changed
set autoread

" Make terminal Vim trigger autoread more often.
au WinEnter,BufWinEnter,CursorHold * checktime
" TODO it does not reload directly when swithching terminal tabs or tmux screens/panes

" Automatically save changes before switching buffer with some
" commands, like :cnfile.
set autowrite
" Show partially typed command sequences.
set showcmd
" Minimal number of lines to always show above/below the caret.
set scrolloff=3
" Soft wrap.Soft
set wrap
" Let - be a valid keyword character
set iskeyword+=-
" Add a visual line after the 80 character breakpoint
set colorcolumn=81
" Toggle paste
set pastetoggle=<leader>p
"Open the focused split, when splitting the window, to the right and
"to the bottom instead of to left and top
set splitbelow
set splitright
" Little hack to fix the split/scroll problem (scrolls down on split)
tabnew
bwipeout

" resize current buffer by +/- 5
nnoremap <C-w><left> :vertical resize -5<cr>
nnoremap <C-w><up> :resize +5<cr>
nnoremap <C-w><down> :resize -5<cr>
nnoremap <C-w><right> :vertical resize +5<cr>

"Strip all trailing whitespace <del>before writing to the buffer</del>
"on leader mapping
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
map <leader>stw :call <SID>StripTrailingWhitespaces()<CR>


"" More mappings
"map double j to escape in insert mode, to save finger travel distance.
imap jj <Esc>

nnoremap <space> za

" map ctrl-s to enter in command line mode
cnoremap <C-S> <cr>
"map ctrl-s to save
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <esc>:update<CR>
" leader+d to create the directory in which the file is created
map <Leader>d :!mkdir %:p:h<CR>
"Ctrl-O exits insert mode for just one command i think that i prefer to exit
"insert mode on ctrl-s but i keep this comment here if i change my mind

map <Leader>rr :CtrlPClearAllCaches<CR>
" map <Leader>nr :NERDTree<CR><C-W><C-P>
"rails.vim mappings
map <Leader>rc :Rcontroller<CR>
map <Leader>rv :Rview<CR>
map <Leader>rm :Rmodel<CR>
map <Leader>rrr :Rrefresh<CR>
map <Leader>ri :Rinitializer<CR>
"config/routes.rb when no args is given

" Vimux bindings
" Prompt for a command to run
map <Leader>rp :VimuxPromptCommand<CR>
" Run last command executed by RunVimTmuxCommand
map <Leader>rl :VimuxRunLastCommand<CR>
" Inspect runner pane
"disabled since i want that binding for rails.vim
"map <Leader>ri :InspectVimTmuxRunne
" Close all other tmux panes in current window
map <Leader>rx :VimuxCloseRunner
" Interrupt any command running in the runner pane
map <Leader>rs :VimuxInterruptRunner

" Run tests: current file, current test, current context
" map <Leader>t :call VimuxRunCommand("bin/rspec spec")<CR>
" using vroom as a test runner mostly (it caches the name of the
" last run spec file, so that you can run it from any file),
" but i keep these shortcuts to be able to run context test if I'll feel the
" need for that sometime.
" map <Leader>tt :RunAllRubyTests<CR>
map <Leader>ft :RunRubyFocusedTest<CR>
map <Leader>ct :RunRubyFocusedContext<CR>

" send "echo <test command>" to a named pipe (test-command) that runs that
" command so that one can run the tests in another window on the other screen
" (gary bernhardts idea destroy all software, running tests asynchronously)
map <leader>t :w\|:silent exec "!echo 'clear && ./bin/rspec --format documentation %' > test-commands"\|redraw!<CR>


" Ack search for the word under the cursor
map <Leader>a yiw:Ack <C-r>0<CR>

"Some nice commands from github.com/r00k/dotfiles
"''''''''''''''''''''''''''''''''''''''''''''''''
" Don't wait so long for the next keypress (particularly in ambigious Leader
" situations.
set timeoutlen=650 "default 1000
"Reload .vimrc and do bundle install (changed to work with my janus config)
nmap <Leader>bi :source ~/.vimrc.before<cr>:PluginInstall<cr>

" Search for visually selected text (in visual mode)
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" tab settings (the defaults is almost perfect)
autocmd Filetype javascript setlocal ts=4 sw=4 sts=4 expandtab
autocmd Filetype html setlocal ts=2 sw=2 sts=2 expandtab

" Some file name extensions has to have some special treatment
autocmd BufRead,BufNewFile *.hbs\.erb set filetype=html.handlebars
